View(df)
nrow(df[df$Destination.Host.Name == "PROXIES",])
df = read.csv("~/Desktop/ips.csv",stringsAsFactors=FALSE)
View(df.iexplore.no.proxies)
View(df.iexplore.no.proxies)
View(df.iexplore.no.proxies)
g = ggplot(data=df.all, aes(x=Source.Address, y=Destination.Address))
g = g + stat_sum(aes(group=1, colour=Source.User.Name, size=..n..))
g = g + facet_wrap(~Source.Process.Name)
g = g + labs(title=sprintf("All Connections - No Filter"))
g = g + theme_few()
g = g + theme(axis.text.x = element_text(angle = 90))
g = g + theme(axis.text = element_text(size=(rel(0.25))))
g
g = ggplot(data=df.all, aes(x=Source.Address, y=Destination.Address))
g = g + stat_sum(aes(group=1, colour=Destination.Zone.URI, size=..n..))
g = g + facet_wrap(~Source.Process.Name)
g = g + labs(title=sprintf("All Connections - No Filter"))
g = g + theme_few()
g = g + theme(axis.text.x = element_text(angle = 90))
g = g + theme(axis.text = element_text(size=(rel(0.25))))
g
g = ggplot(data=df.all, aes(x=Source.Address, y=Destination.Address))
g = g + stat_sum(aes(group=1, colour=Destination.Zone.URI, size=..n..))
g = g + facet_wrap(~Source.Process.Name)
g = g + labs(title=sprintf("All Connections After Primary Filters"))
g = g + theme_few()
g = g + theme(axis.text.x = element_text(angle = 90))
g = g + theme(axis.text = element_text(size=(rel(0.25))))
g
df = read.csv("~/Desktop/ips.csv",stringsAsFactors=FALSE)
df = read.csv("~/Desktop/ips.csv",stringsAsFactors=FALSE)
g = ggplot(data=df, aes(x=Source.Address, y=Destination.Address))
g = g + stat_sum(aes(group=1, colour=Destination.Zone.URI, size=..n..))
g = g + facet_wrap(~Source.Process.Name)
g = g + labs(title=sprintf("All Connections - No Filters"))
g = g + theme_few()
g = g + theme(axis.text.x = element_text(angle = 90))
g = g + theme(axis.text = element_text(size=(rel(0.25))))
g
df$Destination.Zone.URI = sub("/All Zones/ArcSight System/","",df$Destination.Zone.URI)
df$Destination.Zone.URI = sub("Public Address Space Zones","P",df$Destination.Zone.URI)
df$Destination.Zone.URI = sub("Dark Address Space Zones","D",df$Destination.Zone.URI)
df$Destination.Zone.URI = sub("ARIN/","",df$Destination.Zone.URI)
g = ggplot(data=df, aes(x=Source.Address, y=Destination.Address))
g = g + stat_sum(aes(group=1, colour=Destination.Zone.URI, size=..n..))
g = g + facet_wrap(~Source.Process.Name)
g = g + labs(title=sprintf("All Connections - No Filters"))
g = g + theme_few()
g = g + theme(axis.text.x = element_text(angle = 90))
g = g + theme(axis.text = element_text(size=(rel(0.25))))
g
?strsplit
?int
function ip2long(ip) {
octets = strsplit(ip,".",fixed=TRUE)
a*16777216 + b*65536 +c*256 +d
return( octets[1]*16777216 + octets[2]*65536 + octets[3]*256 + octets[4])
}
function ip2long(ip) {
octets = strsplit(ip,".",fixed=TRUE)
return( octets[1]*16777216 + octets[2]*65536 + octets[3]*256 + octets[4])
}
ip2long <- function(ip) {
octets = strsplit(ip,".",fixed=TRUE)
return( octets[1]*16777216 + octets[2]*65536 + octets[3]*256 + octets[4])
}
ip2long("192.168.0.1")
octets = strsplit(ip,".",fixed=TRUE).asInteger()
?asInteger
?asInt
ip2long <- function(ip) {
octets = as.integer(strsplit(ip,".",fixed=TRUE))
return( octets[1]*16777216 + octets[2]*65536 + octets[3]*256 + octets[4])
}
ip2long("192.168.0.1")
?as.integer
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) { as.integer(o) })
return( octets[1]*16777216 + octets[2]*65536 + octets[3]*256 + octets[4])
}
ip2long("192.168.0.1")
as.character
?as.character
256^3
3232235521 % (256^2)
3232235521 %% (256^2)
3232235521 %/% (256^2)
long2ip <- function(int) {
octet = "'"
for (x in c(3,2,1,0)) {
octet = paste(octet, as.character(int/(256^x)), sep=".")
int = int %/% ( 256^x)
}
return(octet)
}
long2ip(3232235521)
long2ip <- function(int) {
octet = "'"
for (x in c(3,2,1,0)) {
octet = paste(octet, ".", as.character(int/(256^x)), sep="")
int = int %/% ( 256^x)
}
return(octet)
}
long2ip(3232235521)
3232235521 % (256^3)
3232235521 %% (256^3)
long2ip <- function(int) {
octet = "'"
for (x in c(3,2,1,0)) {
octet = paste(octet, ".", as.character(int/(256^x)), sep="")
int = int %% ( 256^x)
}
return(octet)
}
long2ip(3232235521)
long2ip <- function(int) {
octet = "'"
for (x in c(3,2,1,0)) {
octet = paste(octet, ".", as.character(as.integer(int/(256^x))), sep="")
int = int %% ( 256^x)
}
return(octet)
}
long2ip(3232235521)
?substring
substring(long2ip(3232235521),2)
substring(long2ip(3232235521),3)
substring(long2ip(3232235521),start=2)
substring(x=long2ip(3232235521),start=2)
substring(long2ip(3232235521),first=2)
substring(long2ip(3232235521),first=3)
long2ip <- function(int) {
octet = ""
for (x in c(3,2,1,0)) {
octet = paste(octet, ".", as.character(as.integer(int/(256^x))), sep="")
int = int %% ( 256^x)
}
return(substringoctet)
}
substring(long2ip(3232235521),first=2)
substring(long2ip(3232235521),first=2)
long2ip <- function(int) {
octet = ''
for (x in c(3,2,1,0)) {
octet = paste(octet, ".", as.character(as.integer(int/(256^x))), sep="")
int = int %% ( 256^x)
}
return(substringoctet)
}
substring(long2ip(3232235521),first=2)
logn2ip(3232235521)
long2ip(3232235521)
long2ip <- function(int) {
octet = ""
for (x in c(3,2,1,0)) {
octet = paste(octet, ".", as.character(as.integer(int/(256^x))), sep="")
int = int %% ( 256^x)
}
return(octet)
}
substring(long2ip(3232235521),first=2)
#
# ip2long(ip)
#
# take an IP address string in dotted octets (e.g. "192.168.0.1")
# and convert it to a 32-bit long integer (e.g. 3232235521)
#
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) { as.integer(o) })
return( octets[1]*(256^3) + octets[2]*(256^2) + octets[3]*256 + octets[4])
}
#
# long2ip(int)
#
# take an 32-bit integer IP address (e.g. 3232235521)
# and convert it to a (e.g. "192.168.0.1")
#
long2ip <- function(int) {
octet = ""
for (x in c(3,2,1,0)) {
octet = paste(octet, ".", as.character(as.integer(int/(256^x))), sep="")
int = int %% ( 256^x)
}
return(substring(octet,first=2))
}
ip2long("192.168.0.1")
long2ip(3232235521)
ip2long("10.0.1.1")
for (i in 167772417:167772500) { logn2ip(i)}
for (i in 167772417:167772500) { long2ip(i)}
for (i in 167772417..167772500) { long2ip(i) }
for (i in seq(167772417,167772500)) { long2ip(i) }
for (i in 167772417:167772500) { cat(i)}
?cat
for (i in 167772417:167772500) { cat(i,"\n")}
for (i in 167772417:167772500) { cat(long2ip(i)}
for (i in 167772417:167772500) { cat(long2ip(i)) }
for (i in 167772417:167772500) { cat(long2ip(i,"\n")) }
for (i in 167772417:167772500) { cat(long2ip(i),"\n") }
#
# ip2long(ip)
#
# take an IP address string in dotted octets (e.g. "192.168.0.1")
# and convert it to a 32-bit long integer (e.g. 3232235521)
#
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
as.integer(o)
})
return(octets[1]*(256^3) + octets[2]*(256^2) +
octets[3]*256 + octets[4])
}
#
# long2ip(int)
#
# take an 32-bit integer IP address (e.g. 3232235521)
# and convert it to a (e.g. "192.168.0.1")
#
# it's less "R-ish" due to lack of built-in bitwise ops
#
long2ip <- function(int) {
octet = ""
for (x in c(3,2,1,0)) {
octet = paste(octet, ".",
as.character(as.integer(int/(256^x))),
sep="")
int = int %% (256^x)
}
return(substring(octet,first=2))
}
ip2long("192.168.0.1")
long2ip(3232235521)
stemleaf <- function(x, width=70) {
xtbl <- data.frame(table(x))
xpad <- max(nchar(as.character(xtbl$x)))
Freqpad <- max(nchar(xtbl$Freq))
padding <- width - (2 + xpad + Freqpad)
xtbl$tspace = round((padding/max(xtbl$Freq))*xtbl$Freq)
buf <- paste("%", xpad, "s %-", padding, "s %-s", sep="")
apply(xtbl, 1, function(y) sprintf(buf, y['x'],
paste(rep("*", y['tspace']),
collapse=""), y['Freq']))
}
#
# ip2long(ip)
#
# take an IP address string in dotted octets (e.g. "192.168.0.1")
# and convert it to a 32-bit long integer (e.g. 3232235521)
#
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
as.integer(o)
})
return(octets[1]*(256^3) + octets[2]*(256^2) +
octets[3]*256 + octets[4])
}
#
# long2ip(int)
#
# take an 32-bit integer IP address (e.g. 3232235521)
# and convert it to a (e.g. "192.168.0.1")
#
# it's less "R-ish" due to lack of built-in bitwise ops
#
long2ip <- function(int) {
octet = ""
for (x in c(3,2,1,0)) {
octet = paste(octet, ".",
as.character(as.integer(int/(256^x))),
sep="")
int = int %% (256^x)
}
return(substring(octet,first=2))
}
ip2long("192.168.0.1")
long2ip(3232235521)
s^24
2^24
library(bitops)
ip2long("192.168.0.0")
bitAnd(bitAnd(2^32,2^24),ip2long("192.168.0.0"))
bitAnd(bitXor(2^32,2^24),ip2long("192.168.0.0"))
bitXor(2^32,2^24)
bitXor(2^32,2^24)
bitXor(2^32,2^24)
2^32
2^31
bitXor(2^32,2^24)
maxint
maxint()
2^31
bitXor(2^31,2^24)
bitAnd(bitXor(2^31,2^24),ip2long("192.168.0.0"))
bitAnd(bitXor(2^31,2^24),ip2long("192.168.0.0"))
bitAnd(bitXor(2^31,2^24),ip2long("192.168.0.0")) + 1
bitOr(bitXor(2^31,2^24),ip2long("192.168.0.0"))
bitAnd(bitXor(2147483647,2^24),ip2long("192.168.0.0")) + 1
bitAnd(bitXor(2^31,2^24),ip2long("192.168.0.0")) + 1
long2ip(bitAnd(bitXor(2^31,2^24),ip2long("192.168.0.0")) + 1)
long2ip(bitAnd(bitXor(2^31,2^24),ip2long("192.168.0.0")) + 1)
long2ip(bitOr(bitXor(2^31,2^24),ip2long("192.168.0.0")))
long2ip(bitAnd(bitXor(2^31,2^26),ip2long("192.168.33.64")) + 1)
long2ip(bitOr(bitXor(2^31,2^26),ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(2^31,2^26),ip2long("192.168.33.64")) + 1)
long2ip(bitOr(bitXor(2^31,2^26),ip2long("192.168.33.64")))
2^31
ip2long("192.168.33.64")
ip2long("192.168.33.64")
2^24
long2ip(bitAnd(bitXor(2^31-1,2^26),ip2long("192.168.33.64")))
long2ip(bitOr(bitXor(2^31-1,2^26),ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(2^32-1,2^26),ip2long("192.168.33.64")))
long2ip(bitOr(bitXor(2^32-1,2^26),ip2long("192.168.33.64"))
ip2long("255.255.255.255")
ip2long("255.255.255.255")
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64")))
long2ip(bitOr(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))
)
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))
long2ip(bitOr(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26)),ip2long("192.168.33.64"))
long2ip(bitOr(bitXor(ip2long("255.255.255.255"),2^26)),ip2long("192.168.33.64"))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64")))
long2ip(bitOr(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64")))
long2ip(bitOr(2^26),ip2long("192.168.33.64"))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64")))
long2ip(bitOr(2^26,ip2long("192.168.33.64"))
)
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64")))
long2ip(bitOr(2^26,ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(2^26,ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitXor(ip2long(2^26),ip2long("192.168.33.64")))
)
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(ip2long(2^26),ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(2^26,ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64")))
mask = bitXor(ip2long("255.255.255.255"),2^26)
mask = bitXor(ip2long("255.255.255.255"),2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitXor(mask),ip2long("192.168.33.64")))
?bitOps
?bitops
??bitops
mask = bitXor(ip2long("255.255.255.255"),2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitFlip(mask),ip2long("192.168.33.64")))
mask = bitXor(ip2long(-1,2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitFlip(mask),ip2long("192.168.33.64")))
mask = bitXor(-1,2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitFlip(mask),ip2long("192.168.33.64")))
mask = bitFlip(2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitFlip(mask),ip2long("192.168.33.64")))
long2ip(bitOr(mask,ip2long("192.168.33.64")))
mask = bitFlip(2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(mask,bitFlip(ip2long("192.168.33.64"))))
mask = bitFlip(2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitXor(mask),ip2long("192.168.33.64")))
mask = 2^26
long2ip(bitAnd(bitFlip(mask),ip2long("192.168.33.64"))+1)
long2ip(bitOr(mask,ip2long("192.168.33.64")))
mask = 2^26
long2ip(bitAnd(bitFlip(mask),ip2long("192.168.33.64"))+1)
long2ip(bitXor(mask,ip2long("192.168.33.64")))
mask = 2^26
long2ip(bitAnd(bitFlip(mask),ip2long("192.168.33.64"))+1)
long2ip(bitOr(mask,ip2long("192.168.33.64")))
mask = 2^26
long2ip(bitAnd(bitFlip(mask),ip2long("192.168.33.64"))+1)
long2ip(bitAnd(mask,ip2long("192.168.33.64")))
2^26
ip2long("192.168.33.64")
bitAnd(mask,ip2long("192.168.33.64"))
mask = 2^26
bitAnd(mask,ip2long("192.168.33.64"))
?bitFlip
?bitps
?bitops
?bitOr
?bitFlip
mask = bitFlip(2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitAnd(bitFlip(mask,bitWidth=32),ip2long("192.168.33.64")))
mask = bitFlip(2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitFlip(mask,bitWidth=32),ip2long("192.168.33.64")))
bitFlip(mask)
bitFlip(mask,bitWidth=32)
bitFlip(mask,bitWidth=32)
?bitOr
mask = bitFlip(2^26)
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(ip2long("192.168.33.64"),bitFlip(mask,bitWidth=32)))
ip2long("192.168.33.64")
bitFlip(mask,bitWidth=32)
mask
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(ip2long("192.168.33.64"),-mask))
mask = bitFlip(2^26)
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(-ip2long("192.168.33.64"),-mask))
mask = -2^26
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(ip2long("192.168.33.64"),-mask))
mask = -(2^26)
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(ip2long("192.168.33.64"),-mask))
mask = bitFlip(2^26)
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(ip2long("192.168.33.64"),-mask))
ip2long("192.168.33.64")
mask = bitFlip(2^26)
mask
long2ip(-995614400)
mask = bitFlip(2^26)
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitAnd(ip2long("192.168.33.64"),bitFlip(mask))
)
mask = bitFlip(2^26)
mask
bitFlip(mask)
ip2long("192.168.33.64")
long2ip(3299352896)
longtip(bitAnd(ip2long("192.168.33.64"), mask) + mask)
longtoip(bitAnd(ip2long("192.168.33.64"), mask) + mask)
long2ip(bitAnd(ip2long("192.168.33.64"), mask) + mask)
long2ip(bitAnd(ip2long("192.168.33.64"), bitFlip(mask)) + mask)
long2ip(bitAnd(ip2long("192.168.33.64"),bitFlip(mask)))
long2ip(bitAnd(ip2long("192.168.33.64"),mask))
long2ip(bitAnd(ip2long("192.168.33.64"), mask) + mask)
long2ip(bitAnd(ip2long("192.168.33.64") + bitAnd(2^32,bitFlip(bitAnd(2^32,ip2long("192.168.33.64"))))))
bitAnd(2^32,bitFlip(bitAnd(2^32,ip2long("192.168.33.64"))))
bitAnd(-1,bitFlip(bitAnd(-1,ip2long("192.168.33.64"))))
long2ip(bitAnd(ip2long("192.168.33.64") + bitAnd(-1,bitFlip(bitAnd(-1,ip2long("192.168.33.64")))))
)
bitAnd(-1,bitFlip(bitAnd(-1,ip2long("192.168.33.64"))))
long2ip(bitAnd(ip2long("192.168.33.64"),mask) + bitAnd(-1,bitFlip(bitAnd(-1,ip2long("192.168.33.64")))))
long2ip(bitAnd(ip2long("192.168.33.64"),mask) + bitAnd(-1,bitFlip(bitAnd(-1,mask))))
baseInt <- function(ip,mask) {
return(bitAnd(ip,mask))
}
hostmask <- function(mask) {
return(bitAnd(-1,bitFlip(bitAnd(-1,mask))))
}
broadcastInt <- function(ip, mask) {
baseInt(ip, mask) + hostmask(mask)
}
mask = bitFlip(2^26)
baseInt <- function(ip,mask) {
return(bitAnd(ip,mask))
}
hostmask <- function(mask) {
return(bitAnd(-1,bitFlip(bitAnd(-1,mask))))
}
broadcastInt <- function(ip, mask) {
return(baseInt(ip, mask) + hostmask(mask))
}
mask = bitFlip(2^26)
first = baseInt(ip2long("192.168.33.64"),mask)
last = broadcastInt(ip2long("192.168.33.64"),mask)
long2ip(last)
long2ip(first)
long2ip(last)
install.packages("formatR")
tidy.source(width.cutoff = 70)
library(formatR)
tidy.source(width.cutoff = 70)
tidy.source(width.cutoff = 70)
tidy.source(width.cutoff = 70)
tidy.source(width.cutoff = 70)
sqr
?sgr
setwd("~/Dropbox/datavizbook/bob-chapters/chapter3/ch3")
options(width=70)
# Downlad the data file to a local director for processing
# URL for the AlienVault IP Reputation Database (OSSIM format)
# storing the URL in a variable makes it easier to modify later
# if it changes
avURL <- "http://reputation.alienvault.com/reputation.data"
# use relative path for the downloaded data
avRep <- "data/reputation.data"
# using an if{}-wrapped test with download.file() vs read.xxx()
# directly avoids having to re-download a 16MB file every time
# we run the script
if (file.access(avRep)) {
download.file(avURL,avRep)
}
# read in the IP reputation db into a data frame
# this data file has no header, so set header=FALSE
av <- read.csv(avRep,sep="#",header=FALSE)
# assign more readable column names since we don't
# have a header for R to learn them from
colnames(av) <- c("IP","Reliability","Risk","Type",
"Country","Locale","Coords","x")
str(av)
?summary
summary(av$Type,maxsum=10)
summary(av,maxsum=10)
