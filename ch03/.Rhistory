long2ip(bitOr(2^26,ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(2^26,ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitXor(ip2long(2^26),ip2long("192.168.33.64")))
)
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(ip2long(2^26),ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(2^26,ip2long("192.168.33.64")))
long2ip(bitAnd(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitXor(ip2long("255.255.255.255"),2^26),ip2long("192.168.33.64")))
mask = bitXor(ip2long("255.255.255.255"),2^26)
mask = bitXor(ip2long("255.255.255.255"),2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitXor(mask),ip2long("192.168.33.64")))
?bitOps
?bitops
??bitops
mask = bitXor(ip2long("255.255.255.255"),2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitFlip(mask),ip2long("192.168.33.64")))
mask = bitXor(ip2long(-1,2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitFlip(mask),ip2long("192.168.33.64")))
mask = bitXor(-1,2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitFlip(mask),ip2long("192.168.33.64")))
mask = bitFlip(2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitFlip(mask),ip2long("192.168.33.64")))
long2ip(bitOr(mask,ip2long("192.168.33.64")))
mask = bitFlip(2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(mask,bitFlip(ip2long("192.168.33.64"))))
mask = bitFlip(2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitXor(mask),ip2long("192.168.33.64")))
mask = 2^26
long2ip(bitAnd(bitFlip(mask),ip2long("192.168.33.64"))+1)
long2ip(bitOr(mask,ip2long("192.168.33.64")))
mask = 2^26
long2ip(bitAnd(bitFlip(mask),ip2long("192.168.33.64"))+1)
long2ip(bitXor(mask,ip2long("192.168.33.64")))
mask = 2^26
long2ip(bitAnd(bitFlip(mask),ip2long("192.168.33.64"))+1)
long2ip(bitOr(mask,ip2long("192.168.33.64")))
mask = 2^26
long2ip(bitAnd(bitFlip(mask),ip2long("192.168.33.64"))+1)
long2ip(bitAnd(mask,ip2long("192.168.33.64")))
2^26
ip2long("192.168.33.64")
bitAnd(mask,ip2long("192.168.33.64"))
mask = 2^26
bitAnd(mask,ip2long("192.168.33.64"))
?bitFlip
?bitps
?bitops
?bitOr
?bitFlip
mask = bitFlip(2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitAnd(bitFlip(mask,bitWidth=32),ip2long("192.168.33.64")))
mask = bitFlip(2^26)
long2ip(bitAnd(mask,ip2long("192.168.33.64"))+1)
long2ip(bitOr(bitFlip(mask,bitWidth=32),ip2long("192.168.33.64")))
bitFlip(mask)
bitFlip(mask,bitWidth=32)
bitFlip(mask,bitWidth=32)
?bitOr
mask = bitFlip(2^26)
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(ip2long("192.168.33.64"),bitFlip(mask,bitWidth=32)))
ip2long("192.168.33.64")
bitFlip(mask,bitWidth=32)
mask
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(ip2long("192.168.33.64"),-mask))
mask = bitFlip(2^26)
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(-ip2long("192.168.33.64"),-mask))
mask = -2^26
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(ip2long("192.168.33.64"),-mask))
mask = -(2^26)
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(ip2long("192.168.33.64"),-mask))
mask = bitFlip(2^26)
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitOr(ip2long("192.168.33.64"),-mask))
ip2long("192.168.33.64")
mask = bitFlip(2^26)
mask
long2ip(-995614400)
mask = bitFlip(2^26)
long2ip(bitAnd(ip2long("192.168.33.64"),mask)+1)
long2ip(bitAnd(ip2long("192.168.33.64"),bitFlip(mask))
)
mask = bitFlip(2^26)
mask
bitFlip(mask)
ip2long("192.168.33.64")
long2ip(3299352896)
longtip(bitAnd(ip2long("192.168.33.64"), mask) + mask)
longtoip(bitAnd(ip2long("192.168.33.64"), mask) + mask)
long2ip(bitAnd(ip2long("192.168.33.64"), mask) + mask)
long2ip(bitAnd(ip2long("192.168.33.64"), bitFlip(mask)) + mask)
long2ip(bitAnd(ip2long("192.168.33.64"),bitFlip(mask)))
long2ip(bitAnd(ip2long("192.168.33.64"),mask))
long2ip(bitAnd(ip2long("192.168.33.64"), mask) + mask)
long2ip(bitAnd(ip2long("192.168.33.64") + bitAnd(2^32,bitFlip(bitAnd(2^32,ip2long("192.168.33.64"))))))
bitAnd(2^32,bitFlip(bitAnd(2^32,ip2long("192.168.33.64"))))
bitAnd(-1,bitFlip(bitAnd(-1,ip2long("192.168.33.64"))))
long2ip(bitAnd(ip2long("192.168.33.64") + bitAnd(-1,bitFlip(bitAnd(-1,ip2long("192.168.33.64")))))
)
bitAnd(-1,bitFlip(bitAnd(-1,ip2long("192.168.33.64"))))
long2ip(bitAnd(ip2long("192.168.33.64"),mask) + bitAnd(-1,bitFlip(bitAnd(-1,ip2long("192.168.33.64")))))
long2ip(bitAnd(ip2long("192.168.33.64"),mask) + bitAnd(-1,bitFlip(bitAnd(-1,mask))))
baseInt <- function(ip,mask) {
return(bitAnd(ip,mask))
}
hostmask <- function(mask) {
return(bitAnd(-1,bitFlip(bitAnd(-1,mask))))
}
broadcastInt <- function(ip, mask) {
baseInt(ip, mask) + hostmask(mask)
}
mask = bitFlip(2^26)
baseInt <- function(ip,mask) {
return(bitAnd(ip,mask))
}
hostmask <- function(mask) {
return(bitAnd(-1,bitFlip(bitAnd(-1,mask))))
}
broadcastInt <- function(ip, mask) {
return(baseInt(ip, mask) + hostmask(mask))
}
mask = bitFlip(2^26)
first = baseInt(ip2long("192.168.33.64"),mask)
last = broadcastInt(ip2long("192.168.33.64"),mask)
long2ip(last)
long2ip(first)
long2ip(last)
install.packages("formatR")
tidy.source(width.cutoff = 70)
library(formatR)
tidy.source(width.cutoff = 70)
tidy.source(width.cutoff = 70)
tidy.source(width.cutoff = 70)
tidy.source(width.cutoff = 70)
first = baseInt(ip2long("192.168.33.64"),mask)
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
as.integer(o)
})
return(octets[1]*(256^3) + octets[2]*(256^2) +
octets[3]*256 + octets[4])
}
#
# long2ip(int)
#
# take an 32-bit integer IP address (e.g. 3232235521)
# and convert it to a (e.g. "192.168.0.1")
#
long2ip <- function(int) {
octet = ""
for (x in c(3,2,1,0)) {
octet = paste(octet, ".",
as.character(as.integer(int/(256^x))),
sep="")
int = int %% (256^x)
}
return(substring(octet,first=2))
}
ip2long("192.168.0.0")
long2ip(3232235521)
library(bitops)
baseInt <- function(ip,mask) {
return(bitAnd(ip,mask))
}
hostmask <- function(mask) {
return(bitAnd(-1,bitFlip(bitAnd(-1,mask))))
}
broadcastInt <- function(ip, mask) {
return(baseInt(ip, mask) + hostmask(mask))
}
mask = bitFlip(2^26)
ip2long("192.168.33.64")
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
sprintf("%s\n",o)
as.integer(o)
})
return(octets[1]*(256^3) + octets[2]*(256^2) +
octets[3]*256 + octets[4])
}
#
# long2ip(int)
#
# take an 32-bit integer IP address (e.g. 3232235521)
# and convert it to a (e.g. "192.168.0.1")
#
long2ip <- function(int) {
octet = ""
for (x in c(3,2,1,0)) {
octet = paste(octet, ".",
as.character(as.integer(int/(256^x))),
sep="")
int = int %% (256^x)
}
return(substring(octet,first=2))
}
ip2long("192.168.33.64")
ip2long("192.168.0.0")
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
cat(sprintf("%s\n",o))
as.integer(o)
})
return(octets[1]*(256^3) + octets[2]*(256^2) +
octets[3]*256 + octets[4])
}
ip2long("192.168.0.0")
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
as.integer(o)
cat(sprintf("%d\n",o))
})
return(octets[1]*(256^3) + octets[2]*(256^2) +
octets[3]*256 + octets[4])
}
ip2long("192.168.0.0")
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
cat(sprintf("%d\n",as.integer(o)))
as.integer(o)
})
return(octets[1]*(256^3) + octets[2]*(256^2) +
octets[3]*256 + octets[4])
}
ip2long("192.168.0.0")
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
cat(sprintf("%d",as.integer(o)))
as.integer(o)
})
return(octets[1]*(256^3) + octets[2]*(256^2) +
octets[3]*256 + octets[4])
}
ip2long("192.168.0.0")
256^0
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
as.integer(o)
})
cat(octets[1])
cat(octets[2])
cat(octets[3])
cat(octets[4])
return(octets[1]*(256^3) + octets[2]*(256^2) +
octets[3]*256 + octets[4])
}
ip2long("192.168.0.0")
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
as.integer(o)
})
return(octets[1]*(256^3) + octets[2]*(256^2) +
octets[3]*256 + octets[4])
}
#
# long2ip(int)
#
# take an 32-bit integer IP address (e.g. 3232235521)
# and convert it to a (e.g. "192.168.0.1")
#
long2ip <- function(int) {
octet = ""
for (x in c(3,2,1,0)) {
octet = paste(octet, ".",
as.character(as.integer(int/(256^x))),
sep="")
int = int %% (256^x)
}
return(substring(octet,first=2))
}
first = baseInt(ip2long("192.168.33.64"),mask)
last = broadcastInt(ip2long("192.168.33.64"),mask)
long2ip <- function(longip) {
octet = ""
for (x in c(3,2,1,0)) {
octet = paste(octet, ".",
as.character(as.integer(longip/(256^x))),
sep="")
longip = longip %/% (256^x)
}
return(substring(octet,first=2))
}
ip2long("192.168.0.0")
long2ip(3232235520)
long2ip(3232235521)
first = baseInt(ip2long("192.168.33.64"),mask)
last = broadcastInt(ip2long("192.168.33.64"),mask)
?bitShiftL
long2ip <- function(longip) {
return(sprintf("%d.%d.%d.%d",
bitShiftR(bitAnd(longip,bitShiftL(255,24)),24),
bitShiftR(bitAnd(longip,bitShiftL(255,16)),16),
bitShiftR(bitAnd(longip,bitShiftL(255,8)),8),
bitAnd(longip,255)
))
}
long2ip(3232235521)
long2ip(3232235520)
ip2long("192.168.0.0")
first = baseInt(ip2long("192.168.33.64"),mask)
last = broadcastInt(ip2long("192.168.33.64"),mask)
long2ip(first = baseInt(ip2long("192.168.33.64"),mask))
long2ip(last = broadcastInt(ip2long("192.168.33.64"),mask))
long2ip(baseInt(ip2long("192.168.33.64"),mask))
long2ip(broadcastInt(ip2long("192.168.33.64"),mask))
library(bitops)
baseInt <- function(ip,mask) {
return(bitAnd(ip,mask))
}
hostmask <- function(mask) {
return(bitAnd(-1,bitFlip(bitAnd(-1,mask))))
}
broadcastInt <- function(ip, mask) {
return(baseInt(ip, mask) + hostmask(mask))
}
ip2long("192.168.0.0")
ip2long("192.168.0.2")
ip2long("192.168.0.4")
ip2long("192.168.0.6")
long2ip(baseInt(ip2long("192.168.33.64"),mask))
long2ip(broadcastInt(ip2long("192.168.33.64"),mask))
long2ip(3299352896)
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
as.integer(o)
})
bitOr(bitOr(bitOr(bitShiftL(octets[1],24),bitShiftL(octets[2],16)),bitShiftL(octets[3],8)),octets[4])
#   return(octets[1]*(256^3) + octets[2]*(256^2) +
#          octets[3]*256 + octets[4])
( a << 24 ) | ( b << 16 ) | ( c << 8 ) | d;
}
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
as.integer(o)
})
bitOr(bitOr(bitOr(bitShiftL(octets[1],24),bitShiftL(octets[2],16)),bitShiftL(octets[3],8)),octets[4])
#   return(octets[1]*(256^3) + octets[2]*(256^2) +
#          octets[3]*256 + octets[4])
}
ip2long("192.168.0.0")
ip2long("192.168.0.2")
ip2long("192.168.0.4")
ip2long("192.168.33.64")
ip2long("192.168.33.64")
broadcastInt(ip2long("192.168.33.64"),mask)
long2ip(broadcastInt(ip2long("192.168.33.64"),mask))
#
# ip2long(ip)
#
# take an IP address string in dotted octets (e.g. "192.168.0.1")
# and convert it to a 32-bit long integer (e.g. 3232235521)
#
ip2long <- function(ip) {
octets = sapply(strsplit(ip,".",fixed=TRUE),function(o) {
as.integer(o)
})
bitOr(bitOr(bitOr(bitShiftL(octets[1],24),bitShiftL(octets[2],16)),bitShiftL(octets[3],8)),octets[4])
#   return(octets[1]*(256^3) + octets[2]*(256^2) +
#          octets[3]*256 + octets[4])
}
#
# long2ip(int)
#
# take an 32-bit integer IP address (e.g. 3232235521)
# and convert it to a (e.g. "192.168.0.1")
#
a = (ipAddr & (0xff << 24)) >> 24;
b = (ipAddr & (0xff << 16)) >> 16;
c = (ipAddr & (0xff << 8)) >> 8;
d = ipAddr & 0xff;
long2ip <- function(longip) {
return(sprintf("%d.%d.%d.%d",
bitShiftR(bitAnd(longip,bitShiftL(255,24)),24),
bitShiftR(bitAnd(longip,bitShiftL(255,16)),16),
bitShiftR(bitAnd(longip,bitShiftL(255,8)),8),
bitAnd(longip,255)
))
}
#   octet = ""
#   for (x in c(3,2,1,0)) {
#     octet = paste(octet, ".",
#                   as.character(as.integer(longip/(256^x))),
#                   sep="")
#     longip = longip %/% (256^x)
#   }
#   return(substring(octet,first=2))
#}
ip2long("192.168.0.0")
ip2long("192.168.0.2")
ip2long("192.168.0.4")
ip2long("192.168.0.6")
long2ip(3232235520)
library(bitops)
baseInt <- function(ip,mask) {
return(bitAnd(ip,mask))
}
hostmask <- function(mask) {
return(bitAnd(-1,bitFlip(bitAnd(-1,mask))))
}
broadcastInt <- function(ip, mask) {
return(baseInt(ip, mask) + hostmask(mask))
}
mask = bitFlip(2^26)
long2ip(baseInt(ip2long("192.168.33.64"),mask))
long2ip(broadcastInt(ip2long("192.168.33.64"),mask))
a = (ipAddr & (0xff << 24)) >> 24;
b = (ipAddr & (0xff << 16)) >> 16;
c = (ipAddr & (0xff << 8)) >> 8;
d = ipAddr & 0xff;
ip2long(3299352896)
long2ip(3299352896)
setwd("~/Dropbox/datavizbook/bob-chapters/chapter3/ch3")
options(width=70)
# Downlad the data file to a local director for processing
# URL for the AlienVault IP Reputation Database (OSSIM format)
# storing the URL in a variable makes it easier to modify later
# if it changes
avURL <- "http://reputation.alienvault.com/reputation.data"
# use relative path for the downloaded data
avRep <- "data/reputation.data"
# using an if{}-wrapped test with download.file() vs read.xxx()
# directly avoids having to re-download a 16MB file every time
# we run the script
if (file.access(avRep)) {
download.file(avURL, avRep)
}
setwd("~/Dropbox/datavizbook/chapters/ch03")
options(width=70)
# Downlad the data file to a local director for processing
# URL for the AlienVault IP Reputation Database (OSSIM format)
# storing the URL in a variable makes it easier to modify later
# if it changes
avURL <- "http://reputation.alienvault.com/reputation.data"
# use relative path for the downloaded data
avRep <- "data/reputation.data"
# using an if{}-wrapped test with download.file() vs read.xxx()
# directly avoids having to re-download a 16MB file every time
# we run the script
if (file.access(avRep)) {
download.file(avURL, avRep)
}
av <- read.csv(avRep,sep="#",header=FALSE)
# assign more readable column names since we don't
# have a header for R to learn them from
colnames(av) <- c("IP","Reliability","Risk","Type",
"Country","Locale","Coords","x")
# get an R overview of the data frame with str()
str(av)
head(av)
# get an overview of each individual column
summary(av$Reliability)
summary(av$Risk)
# since these are integers, we can create a table()
table(av$Reliability)
table(av$Risk)
# summary sorts by the counts by default
# maxsum sets how many factors to display
summary(av$Type, maxsum=10)
summary(av$Country, maxsum=40)
# Bar graph of counts (sorted) by Country (top 20)
# get the top 20 countries' names
country.top20 <- names(summary(av$Country))[1:20]
# give ggplot a subset of our data (the top 20 countries)
# map the x value to a sorted count of country
g <- ggplot(data=subset(av,Country %in% country.top20),
aes(x=reorder(Country,Country,length)))
# tell ggplot we want a bar chart and to sort by country count
g <- g + geom_bar()
# ensure we have decent labels
g <- g + labs(title="Country Counts", x="Country")
# rotate the chart to make this one more readable
g <- g + coord_flip()
print(g)
set.seed(1492) # as it leads to discovery
# generate 260,000 random samples
rsk=sample(1:7, 260000, replace=T)
rel=sample(1:10, 260000, replace=T)
# cast table into data frame
tmp.df = data.frame(table(factor(rsk), factor(rel)))
colnames(tmp.df) <- c("Risk", "Reliability", "Freq")
levelplot(Freq~Reliability*Risk, data=tmp.df, main="Risk ~ Reliabilty",
ylab="Risk", xlab = "Reliability", shrink = c(0.5, 1),
col.regions = colorRampPalette(c("#FFFFFF", "#0868AC"))(20))
library(lattice)
set.seed(1492) # as it leads to discovery
# generate 260,000 random samples
rsk=sample(1:7, 260000, replace=T)
rel=sample(1:10, 260000, replace=T)
# cast table into data frame
tmp.df = data.frame(table(factor(rsk), factor(rel)))
colnames(tmp.df) <- c("Risk", "Reliability", "Freq")
levelplot(Freq~Reliability*Risk, data=tmp.df, main="Risk ~ Reliabilty",
ylab="Risk", xlab = "Reliability", shrink = c(0.5, 1),
col.regions = colorRampPalette(c("#FFFFFF", "#0868AC"))(20))
